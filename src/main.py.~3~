"""
pythontestbed: Python testbed.
"""

the_world_is_flat = True
if the_world_is_flat:
	print("Be careful not to fall off!")


print(17 / 3)
print(17 // 3)

print(-3 ** 2)
print((-3) ** 2)


print(r'C:\some\directory')


print("""\
Usage: thingy [OPTIONS]
		-h				Display this usage message
		-H hostname		Hostname to connect to
""")


text = ('''A
	B''')
print(text)


print(3 * 'un' + 'ium')
print('Py' 'thon')
prefix = 'Py'
print(prefix + 'thon')


string = 'abcd'
print(len(string))


squares = [1, 4, 9, 16, 25]
print(squares)
print("Shallow copy: ", squares[:])	# Shallow copy.
squares = squares + [36, 50]
print(squares)
squares[6] = 49
print(squares)
squares.append(64)
print(squares)
squares[:7] = [49, 64]
print(squares)
squares[1:2] = []
print(squares)
print(len(squares))


row1 = ['00', '01', '02']
row2 = ['10', '11', '12']
matrix = [row1, row2]
print(matrix)
print(matrix[0][1])


a, b = 0, 1	# Multiple assignment.
while b < 10:	# Any non-zero integer is true.
	print(b)
	a, b = b, a + b	# r.h.s. expressions are evaluated from LTR.


x = int(input("Integer ? "))
if x < 0:
	print('negative')
elif x == 0:
	print('zero')
else:
	print('positive')	# Python doesn't have 'switch'.


words = ['cat', 'window', 'forest']
for w in words:	# 'for' iterates over the items of any sequence (a list or a string).  This form can not modify the items.
	print(w, len(w))


words = ['cat', 'window', 'forest']
for w in words[:]:	# Makes a copy of 'words' to enable modification.
	if len(w) > 6:
		words.insert(0, w)
print(words)


for i in range(5):
	print(i)


a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
	print(i, a[i])


print(range(10))


print(list(range(5)))


for n in range(2, 10):
	for x in range(2, n):
		if n % x == 0:
			print(n, 'equals', x, '*', n // x)
			break
		else:
			# loop fell through without finding a factor
			print(n, 'is a prime number')


for num in range(2, 10):
	if num % 2 == 0:
		print("Found an even number", num)
		continue
	print("Found a number", num)


# while True:
# 	pass


class MyEmptyClass:
	pass


def initlog(*args):
	pass


def fib(n):
	"""Print a Fibonacci series up to n."""
	a, b = 0, 1
	while a < n:
		print(a, end = ' ')
		a, b = b, a+b
	print()

print(fib(0))


def fib2(n):  # return Fibonacci series up to n
	"""Return a list containing the Fibonacci series up to n."""
	result = []
	a, b = 0, 1
	while a < n:
		result.append(a)
		a, b = b, a + b
	return result


def ask_ok(prompt, retries=4, reminder='Please try again!'):
	while True:
		ok = input(prompt)
		if ok in ('y', 'ye', 'yes'):
			return True
		if ok in ('n', 'no', 'nop', 'nope'):
			return False
		retries = retries - 1
		if retries < 0:
			raise ValueError('invalid user response')
		print(reminder)


i = 5

def f(arg=i):
	print(arg)


def f(a, L=[]):
	L.append(a)
	return L

print(f(1))
print(f(2))
print(f(3))


def f(a, L=None):
	if L is None:
		L = []
	L.append(a)
	return L


def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
	print("-- This parrot wouldn't", action, end=' ')
	print("if you put", voltage, "volts through it.")
	print("-- Lovely plumage, the", type)
	print("-- It's", state, "!")


def cheeseshop(kind, *arguments, **keywords):
	print("-- Do you have any", kind, "?")
	print("-- I'm sorry, we're all out of", kind)
	for arg in arguments:
		print(arg)
	print("-" * 40)
	keys = sorted(keywords.keys())
	for kw in keys:
		print(kw, ":", keywords[kw])

cheeseshop("Limburger", "It's very runny, sir.", "It's really very, VERY runny, sir.", 	shopkeeper = "Michael Palin", client = "John Cleese", sketch = "Cheese Shop Sketch")


def write_multiple_items(file, separator, *args):
	file.write(separator.join(args))


def concat(*args, sep = "/"):
	return sep.join(args)

print(concat("earth", "mars", "venus"))
print(concat("earth", "mars", "venus", sep="."))


# a = 14
# b = 21
# if (a // b) * b + (a % b) == a:
# 	print("True")


# for x in range(2, 10):
# 	if x < 5:
# 		print(x)
# 	else:
# 		break
# else:
# 	print('all less than 5 printed')

# Doesn't work.

# for n in range(2, 10):
# 	for x in range(2, n - 1):
# 		if n % x == 0:
# 			print(n, 'equals', x, '*', n // x)
# 			break
# 	else:
# 		print(n, 'is a prime')
# 	break

# def fib(n):
#     """ Print Fibonacci. """
#     a, b = 0, 1
#     while a < n:
#	  print(a, end = ' ')
#	  a, b = b, a + b
#	  print()

# fib(2000)


# def ask_ok(prompt, retries = 4, complaint = 'Yes/No please'):
#     while True:
#	  ok = input(prompt)
#	  if ok in ('y', 'yes'):
#	      return True
#	  else:
#	      return False
#	  if retries < 0:
#	      raise OSError('uncooperative user')
#	  print(complaint)

# ask_ok('do you really wanna quit')
# ask_ok('do you really wanna quit', 2)


# def f(a, L = []):
#     L.append(a)
#     return L

# print(f(1))
# print(f(2))
# print(f(3))


# def f(a, L = None):
#     if L is None:
#	  L = []
#	  L.append(a)
#	  return L

# print(f(1))


def make_incrementor(n):
	return lambda x: x + n

f = make_incrementor(42)
f(0)
f(1)


pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key = lambda pair: pair[1])
print(pairs)


# num = [4, 3, 1, 2]
# num.sort()
# print(num)
# num.shuffle()
# print(num)

# ab = [(20, 21), (11, 10), (00, 40)]
# ab.sort(key = 2)
# ab.sort(key = 1)
# ab.sort(key = lambda mykey : mykey[1])
# print(ab)

def myfunction():
	"""line 1
	line2
	line3"""
	pass

print(myfunction.__doc__)

def f(ham: str, eggs: str = 'eggs') -> str:
	print("Annotations:", f.__annotations__)
	print("Arguments:", ham, eggs)
	return ham + ' and ' + eggs
f('spam')


fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
print(fruits.count('apple'))
print(fruits.count('tangerine'))
print(fruits.index('banana'))
print(fruits.index('banana', 4))
print(fruits.reverse())
print(fruits)
print(fruits.append('grape'))
print(fruits)
print(fruits.sort())
print(fruits)
print(fruits.pop())


stack = [3, 4, 5]
stack.append(6)
stack.append(7)
print(stack)
print(stack.pop())
print(stack)
print(stack.pop())
print(stack.pop())
print(stack)


from collections import deque

queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")           # Terry arrives
queue.append("Graham")          # Graham arrives
print(queue.popleft())                 # The first to arrive now leaves
print(queue.popleft())                 # The second to arrive now leaves
print(queue)                           # Remaining queue in order of arrival


squares = []
for x in range(10):
	squares.append(x ** 2)
print(squares)


squares = list(map(lambda x: x**2, range(10)))
print(squares)


squares = [x**2 for x in range(10)]
print(squares)


print([(x, y) for x in [1,2,3] for y in [3,1,4] if x != y])


combs = []
for x in [1,2,3]:
	for y in [3,1,4]:
		if x != y:
			combs.append((x, y))
print(combs)


vec = [-4, -2, 0, 2, 4]
# create a new list with the values doubled
print([x*2 for x in vec])

# filter the list to exclude negative numbers
print([x for x in vec if x >= 0])

# apply a function to all the elements
[abs(x) for x in vec]

# call a method on each element
freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
[weapon.strip() for weapon in freshfruit]

# create a list of 2-tuples like (number, square)
print([(x, x**2) for x in range(6)])

# the tuple must be parenthesized, otherwise an error is raised
# [x, x**2 for x in range(6)]

# flatten a list using a listcomp with two 'for'
vec = [[1,2,3], [4,5,6], [7,8,9]]
print([num for elem in vec for num in elem])


from math import pi

[str(round(pi, i)) for i in range(1, 6)]


matrix = [
	[1, 2, 3, 4],
	[5, 6, 7, 8],
	[9, 10, 11, 12],
]
print(matrix)
print([[row[i] for row in matrix] for i in range(4)])


transposed = []
for i in range(4):
	transposed.append([row[i] for row in matrix])
print(transposed)


transposed = []
for i in range(4):
	# the following 3 lines implement the nested listcomp
	transposed_row = []
	for row in matrix:
		transposed_row.append(row[i])
	transposed.append(transposed_row)
print(transposed)


print(list(zip(*matrix)))


a = [-1, 1, 66.25, 333, 333, 1234.5]
del a[0]
print(a)

del a[2:4]
print(a)

del a[:]
print(a)

del a
# print(a)


t = 12345, 54321, 'hello!'
print(t[0])
print(t)

# Tuples may be nested:
u = t, (1, 2, 3, 4, 5)
print(u)

# Tuples are immutable:
# t[0] = 88888

# but they can contain mutable objects:
v = ([1, 2, 3], [3, 2, 1])
print(v)


empty = ()
singleton = 'hello',    # <-- note trailing comma
len(empty)
len(singleton)
print(singleton)


t = 12345, 54321, 'hello!'
print(t)
x, y, z = t
print(x, y, z)


basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket)                      # show that duplicates have been removed
print('orange' in basket)                 # fast membership testing
print('crabgrass' in basket)

# Demonstrate set operations on unique letters from two words
a = set('abracadabra')
b = set('alacazam')
print(a)                                  # unique letters in a
print(a - b)                              # letters in a but not in b
print(a | b)                              # letters in either a or b
print(a & b)                              # letters in both a and b
print(a ^ b)                              # letters in a or b but not both


a = {x for x in 'abracadabra' if x not in 'abc'}
print(a)


tel = {'jack': 4098, 'sape': 4139}
tel['guido'] = 4127
print(tel)
print(tel['jack'])
del tel['sape']
tel['irv'] = 4127
print(tel)
list(tel.keys())
sorted(tel.keys())
print('guido' in tel)
print('jack' not in tel)


print(dict([('sape', 4139), ('guido', 4127), ('jack', 4098)]))


print({x: x**2 for x in (2, 4, 6)})


print(dict(sape=4139, guido=4127, jack=4098))


knights = {'gallahad': 'the pure', 'robin': 'the brave'}
for k, v in knights.items():
	print(k, v)


for i, v in enumerate(['tic', 'tac', 'toe']):
	print(i, v)


questions = ['name', 'quest', 'favorite color']
answers = ['lancelot', 'the holy grail', 'blue']
for q, a in zip(questions, answers):
	print('What is your {0}?  It is {1}.'.format(q, a))


for i in reversed(range(1, 10, 2)):
	print(i)


basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
for f in sorted(set(basket)):
	print(f)


import math

raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
filtered_data = []
for value in raw_data:
	if not math.isnan(value):
		filtered_data.append(value)
print(filtered_data)


string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
non_null = string1 or string2 or string3
non_null


import fibo

fibo.fib(1000)
fibo.fib2(100)
print(fibo.__name__)

fib = fibo.fib
fib(500)


from fibo import fib, fib2

fib(500)


import sys

# print(sys.PS1)
# print(sys.ps2)
# sys.ps1 = 'C> '
# print(sys.ps1)


import sys

sys.path.append('/home/punit/lib/python')


import fibo, sys

print(dir(fibo))
print(dir(sys))


import fibo

a = [1, 2, 3, 4, 5]
fib = fibo.fib
print(dir())


import builtins

print('dir(builtins): ', dir(builtins))


print('sys.path: ', sys.path)


# NOT IN TUTORIAL:
# print([1, 2] < [2, 1])


s = 'Hello, world!'
print(repr(s))
print(str(1/7))
x = 10 * 3.25
y = 200 * 200
s = 'Value of x is ' + repr(x) + ' and y is ' + repr(y) + '...'
print(s)
hello = 'Hello, world!\n'
hellos = repr(hello)
print(hellos)
print(repr((x, y, ('spam', 'eggs'))))


for x in range(1, 11):
	print(repr(x).rjust(2), repr(x * x).rjust(3), end=' ')
	print(repr(x * x * x).rjust(4))


for x in range(1, 11):
	print('{0:2d} {1:3d} {2:4d}'.format(x, x * x, x * x * x))


print('12'.zfill(5))
print('-3.14'.zfill(7))
print('3.14159265359'.zfill(5))
print('We are the {} who say "{}!"'.format('knights', 'Ni'))
print('{0} and {1}'.format('spam', 'eggs'))
print('{1} and {0}'.format('spam', 'eggs'))
print('This {food} is {adjective}.'.format(food = 'spam', adjective = 'absolutely horrible'))
print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred', other = 'George'))


contents = 'eels'
print('My hovercraft is full of {}.'.format(contents))
print('My hovercraft is full of {!r}.'.format(contents))


import math

print('Value of PI is approximately {0:.3f}.'.format(math.pi))


table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
for 2name, phone in table.items():
	print('{0:10} ==> {1:10d}'.format(name, phone))

table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637378}
print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}: Dcab: {0[Dcab]:d}'.format(table))

table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))


import math

print('Value of PI is approx. %5.3f.' % math.pi)


f = open('../var/in.txt', 'r')
print(f.read())
print(f.read())
print(f.readline())
print(f.readline())
f.close()


for line in f:
        print(line, end = '')


f = open('../var/out.txt', 'w')
f.write('This is a test\n')
value = ('answer', 42)
s = str(value)
f.write(s)
f.close()


f = open('../var/out.txt', 'rb+')
print(f.write(b'0123456789abcdef'))
print(f.seek(5))
print(f.read(1))
print(f.seek(-3, 2))
print(f.read(1))
f.close()
f.read()
# import sys

# while True:
#     try:
#	  f = open('/home/punit/tmp/python.in')
#	  s = f.readline()
#	  i = int(s.strip())
#     except IOError as e:
#	  print("I/O error({0}): {1}".format(e.errno, e.strerror))
#     except ValueError:
#	  print("Could not convert data to an integer.")
#     except:
#	  print("Unexpected error:", sys.exc_info()[0])
#	  raise
#     print(i)

# import datetime

# print(now)
# print(date.today())
# print(datetime.date.today())

# t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta', 'yellow'], 'blue']]]
# print(len(t))
# print(len(t[0]))
# print(len(t[0][0]))

# print(hex(255))

# import math

# print(log2(1024))
# print(2 ** 31)

# import sys

# try:
#     f = open('/home/punit/tmp/python.in')
#     for line in f:
#	  print(line.strip())
#	  print(int(line.strip()))
# except IOError as e:
#     print('I/O Error ({0}): {1})'.format(e.errno, e.strerror))
# #    print(sys.exc_info()[0])
# # except ValueError:
# #	print("Could not convert data to an integer.")
# except:
#     print('Unexpected error:', sys.exc_info()[0])
#     print(sys.exc_info())
#     print(type(sys.exc_info()))
#     raise

# import struct

# with open('/mnt/pc3-windows/d/Documents/_OOS/Hacking/CEH/Hacker School/metasploitable-linux-2.0.0.zip', 'rb') as f:
#     data = f.read()

# start = 0
# for i in range(0, 6):
#     start += 14
#     fields = struct.unpack('<IIIHH', data[start:start+16])
#     crc32, comp_size, uncomp_size, filenamesize, extra_size = fields

#     start += 16
#     filename = data[start:start+filenamesize]
#     start += filenamesize
#     extra = data[start:start+extra_size]
#     print("Header ", i + 1, ":", sep = '', end = '')
#     print(filename, hex(crc32), comp_size, uncomp_size)

#     start += extra_size + comp_size

# import threading, zipfile

# class AsyncZip (threading.Thread):	# Like Java, we need to create a class that will create a thread object.
# 	def _init(self, infile, outfile):
# 		self.infile = infile	# Initialise other fields of your thread class.
# 		self.outfile = outfile
# 		threading.Thread.__init__(self)	# This line should be there for every thread class in its 'init'.  Doesn't work.
# 		pass

# 	def run(self):	# Define the operations to be done by the thread.
# 		f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)	# Operation step #1.
# 		f.write(self.infile)
# 		f.close()
# 		print('Finished backgound zip of: ', self.infile)	# This thread is run in background (background thread).

# background = AsyncZip('~/tmp/bind.out', '~/src/_not_mine/src/tmp/mydata.zip')	# Create your thread.
# background.start()	# Start the execution of your thread.
# print('The main program continues to run in foreground')	# This is main thread, running simultaneously.

# background.join()	# Wait for background task to finish.
# print("Background done.")

# import _thread as thread, time

# def counter(myId, count):
# 	for i in range(count):
# 		time.sleep(1)
# 		print('[%s] => %s' % (myId, 1))

# print('Main thread running.')
# for i in range(5):
# 	thread.start_new_thread(counter, (i, 5))

# time.sleep(6)
# print('Main thread exiting.')

# import _thread as thread, time
# import os

# def counter(myId, count):
# 	for i in range(count):
# 		print('Thread ID: %s.  i: %s.' % (myId, i))
# 		time.sleep(2)

# print('Main thread running.')
# for i in range(5):
# 	thread.start_new_thread(counter, (i, 5))

# time.sleep(12)
# print('Main thread exiting.')

# import _thread as thread
# import time
# import zipfile

# def asyncZip(infile, outfile):
# 	print('Background thread started.')
# 	with zipfile.ZipFile(outfile, 'w') as myzip:
# 		myzip.write(infile)
# 	print('Background thread ended. ', infile)	# This thread is run in background (background thread).

# print('Main thread started.')
# thread.start_new_thread(asyncZip, ('/home/punit/src/_not_mine/py3testbed/tmp/ChangeLog.org', '/home/punit/src/_not_mine/py3testbed/tmp/new.zip'))
# time.sleep(1)
# print('Main thread ended.')	# This is main thread, running simultaneously.

# import zipfile

# with zipfile.ZipFile('/home/punit/src/_not_mine/py3testbed/tmp/ChangeLog.zip', 'w') as myzip:
# 	myzip.write('/home/punit/src/_not_mine/py3testbed/tmp/ChangeLog.org')

# import logging

# logging.debug('Debug message')
# logging.info('Informational message')
# logging.warning('Warning: %s', 'server.conf')
# logging.error('Error')
# logging.critical('Critical error')

# import weakref, gc

# class A:
# 	def __init__(self, value):
# 		self.value = value
# 	def __repr__(self):
# 		return str(self.value)

# a = A(10)
# d = weakref.WeakValueDictionary()
# d['primary'] = a
# print("d['primary']: ", d['primary'])
# del a
# gc.collect()
# print("d['primary']: ", d['primary'])

# from array import array

# a = array('H', [4000, 10, 700, 20000])	# H: 2-byte unsigned binary number, thus 2 bytes per entry.
# print('sum: ', sum(a))
# print('a[1:3]: ', a[1:3])

# from collections import deque

# d = deque(["task1", "task2", "task3"])
# d.append("task4")
# print("Handling", d.popleft())
# unsearched = deque(["starting_node"])

# def breadth_first_search(unsearched):
# 	node = unsearched.popleft()
# 	for m in gen_moves(node):
# 		if is_goal(m):
# 			return m
# 		unsearched.append(m)

# import bisect

# scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
# bisect.insort(scores, (300, 'ruby'))
# print(scores)

# from heapq import heapify, heappop, heappush

# data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
# heapify(data)
# heappush(data, -5)
# print([heappop(data) for i in range(3)])

# from decimal import *

# print(round(Decimal('0.70') * Decimal('1.05'), 2))
# print(round(0.70 * 1.05, 2))

# print(Decimal('1.00') % Decimal('0.10'))
# print(1.00 % 0.10)
# print(sum([Decimal('0.1')] * 10) == Decimal('1.0'))
# print(sum([0.1] * 10) == 1.0)

# getcontext().prec = 36
# print(Decimal(1) / Decimal(7))

# import readline

# print(readline.get_history_length())

# import math

# print(format(math.pi, '.12g'))
# print(format(math.pi, '.2f'))
# print(repr(math.pi))

# print(round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1))	# False.
# print(round(0.1, 20) + round(0.1, 20) + round(0.1, 20) == round(0.3, 20))	# False.
# print(round(0.1 + 0.1 + 0.1, 10) == round(0.3, 10))	# True.

# x = 3.14159
# print(x.as_integer_ratio())	# (3537115888337719, 1125899906842624).  Much more exact than smaller numbers for lossless recreation of original numbers.
# print(x.hex())	# '0x1.921f9f01b866ep+1'
# print(x == float.fromhex('0x1.921f9f01b866ep+1'))	# True

# print(sum([0.1] * 10) == 1.0)	# False
# import math
# print(math.fsum([0.1] * 10) == 1.0)	# True

# from decimal import Decimal
# from fractions import Fraction

# print(format(0.1, '.17f'))	# '0.10000000000000001'
# print(Fraction.from_float(0.1))	# Fraction(3602879701896397, 36028797018963968)
# print((0.1).as_integer_ratio())	# (3602879701896397, 36028797018963968)
# print(Decimal.from_float(0.1))	# Decimal('0.1000000000000000055511151231257827021181583404541015625')
# print(format(Decimal.from_float(0.1), '.17'))	# '0.10000000000000001'


# print('Hello, World!')


# import matplotlib
#
# txt = urwid.Text(u"Hello World")
# fill = urwid.Filler(txt, 'top')
# loop = urwid.MainLoop(fill)
# loop.run()
#
# def exit_on_q(key):
# 	if key in ('q', 'Q'):
# 		raise urwid.ExitMainLoop()
#
# palette = [('banner', 'black', 'light gray'), ('streak', 'black', 'dark red'), ('bg', 'black', 'dark blue'), ]
#
# txt = urwid.Text(('banner', u" Hello World "), align = 'center')
# map1 = urwid.AttrMap(txt, 'streak')
# fill = urwid.Filler(map1)
# map2 = urwid.AttrMap(fill, 'bg')
# loop = urwid.MainLoop(map2, palette, unhandled_input = exit_on_q)
# loop.run()
#
#
# import numpy as np
# import matplotlib.pyplot as plt
# import matplotlib as mpl
# import matplotlib.style as mplstyle
#
# names = ['group_a', 'group_b', 'group_c']
# values = [1, 10, 100]
# plt.figure(1, figsize=(9, 3))
# plt.subplot(131)
# plt.bar(names, values)
# plt.subplot(132)
# plt.scatter(names, values)
# plt.subplot(133)
# plt.plot(names, values)
# plt.suptitle('Categorical Plotting')
# plt.show()
#
#
# def merge_lists():
# 	lengthList1 = input()
# 	lengthList2 = input()
# 	count = 0
# 	list1 = list2 = list3 = []
# 	while count < int(lengthList1):
# 		list1.append(int(input()))
# 	count = 0
# 	while count < lengthList2:
# 		list2.append(int(input()))
#
# 	i = j = 0
# 	while i < lengthList1 and j < lengthList2:
# 		if int(list1[i]) < int(list2[j]):
# 			list3.append(list1[i])
# 			i += 1
# 		else:
# 			list3.append(list2[j])
# 			j += 1
#
# 	list3 = list3 + list1[i:] + list2[j:]
#
# if __name__ == '__main__':
# 	merge_lists()


# print(len(str(2 ** 10)))
#
#
# import math
#
# print(math.pi)
# print(math.sqrt(-1))
# print(str(math.sqrt(10))[0])
# print(str(math.pi)[len(str(math.pi))-2])
#
#
# import random
#
# print(random.random())
# print(random.choice([123, 45, 39, 21, 8888]))
#
#
# myString = 'abcdef'
# print(myString * 2)
#
#
# print(len(list(myString)))
#
#
# myList = list(myString)
# myList[3] = 'k'
# myList = ''.join(myList)
# print(myList)
#
#
# myBA = bytearray(b'yellow')
# myBA.extend(b'bellow')
# print(myBA)
# print(myBA.decode())
#
#
# myString = 'spam'
# print(myString.find('pa'))
# print(myString.replace('pa', 'xyz'))
# print(myString)
#
#
# myString = 'spam, bram, wham'
# print(myString.split(','))
#
#
# print("%s, %s, and %s, ma'am" %('wham', 'bang', 'thank you'))
# print("{}, {}, and {}, ma'am".format('wham', 'bang', 'thank you'))
# print('{:,.2f} and {:+04d}'.format(3000.14159, 3))
# print('%+04d and %.3f' %(3, 30.300999))
#
#
# print(dir())
# print(dir(myString))
#
#
# print(myString.__add__(', cram'))
#
#
# print(help(str.format))
#
#
# myString = 'Hello, Punit\'s Laptop'
# print(myString)
#
#
# myString = r'C:\new'
# print(myString)
#
#
# myString = 'Sp\xc4\u00c4\U000000c4m'
# print(myString)
#
#
# import re
#
# match = re.match('Hello[ \t]*(.*)world', 'Hello		Python world')
# print(match.group(1))
#
# match = re.match('(.*)[/:](.*)[/:](.*)[/:](.*)', 'lumberjack:/home/user')
# print(match.groups())
#
# print(re.split('[/:]', 'lumberjack:/home/punit'))
# print(help(re.split))
#
#
# myList = [1, 2]
# print(myList + [3])
# print(myList * 2)
# myList.append('PALLAVI')
# print(myList)
# print(help(myList.pop))
# print(help(myList.sort))
# matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# secondColumn = [row[1] + 1 for row in matrix if row[1] % 2 == 0]
# print(secondColumn)
# diagonal = [matrix[row][row] for row in [0, 1, 2]]
# print(diagonal)
# doubledLetters = [character * 2 for character in 'PALLAVI']
# print(doubledLetters)
# myList = list(range(30))
# print(myList)
# myList = list(range(-6, 7, 2))
# print(myList)
# myList = [[x ** 2, x ** 3] for x in list(range(4)) if x % 2 == 0]
# print(myList)
# myGenerator = ([x ** 2, x ** 3] for x in list(range(4)) if x % 2 == 0)
# print(next(myGenerator))
# print(next(myGenerator))
# print('list map sum: ' + str(list(map(sum, matrix))))
# print(list(map(sum, matrix)))
# print(matrix)
# print({sum(row) for row in matrix})
# print({row: sum(matrix[row]) for row in range(3)})
# print([ord(character) for character in 'PALLAVIBABY'])
# print({ord(character) for character in 'PALLAVI'})
#
#
# myDictionary = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
# print(myDictionary['key1'] + str(1))
# # myDictionary1['key3'] = 'value3'
# # print(myDictionary1['key3'])
# myDictionary1 = dict(key4 = 'value4')
# print(myDictionary1['key4'])
# myDictionary2 = dict(zip(['name', 'age', 'salary'], ['Pallavi', 27, 1000000]))
# print(myDictionary2)
# print(myDictionary2.get('name2', 'Punit'))
# print(myDictionary2['name'] if 'name2' in myDictionary2 else 'Punit')
# keys = list(myDictionary2.keys())
# print(keys)
# for key in sorted(myDictionary2):
# 	print(myDictionary2[key])
#
#
# myTuple = 'item1', 2, 3.0, ['four1', 'four2'], 'item1'
# print(myTuple[1])
# print(myTuple.index(2))
# print(myTuple.count('item1'))
# print(myTuple[3])
#
#
# allTheFile = open('/home/punit/doc/Notes.org', encoding = 'utf-8')
# print(len(allTheFile.read()))
# for line in open('/home/punit/doc/Notes.org'):
# 	print(line.rstrip())
# 	words = line.split()
# 	print(words)
#
#
# import struct
#
# packed = struct.pack('>i10sh', 7, b'PALLAVI', 8)
# print(packed)
# myFile = open('/home/punit/src/pythontestbed/var/bytestring.bin', 'wb')
# myFile.write(packed)
# myFile.close()
#
# readString = open('/home/punit/src/pythontestbed/var/bytestring.bin', 'rb').read()
# print(readString)
# print(readString[4:8])
# print(len(readString))
# print(list(readString))
# print('Read: ' + readString.decode())
# print(struct.unpack('>i10sh', readString))
#
#
# print(list('🌥'.encode('utf-8')))
# print(list('🌥'.encode('utf-16')))
# print(list('🌥'.encode('utf-32')))
#
#
# mySet = set(str('pallavi'))
# mySet1 = set('punit')
# print(mySet)
# print(mySet & mySet1)
# print(mySet - mySet1)
# print(list(set('pallavi')))
#
#
# import decimal
#
# d = decimal.Decimal(3.141)
# print(d + 1)
#
# decimal.getcontext().prec = 2
# print(decimal.Decimal(1) / decimal.Decimal(3))
#
#
# from fractions import Fraction
#
# myFraction = Fraction(1, 4)
# print(myFraction + 1)
# print(myFraction + Fraction(1, 2))
#
#
# print(bool('spam'))
#
#
# variable = None
# print(variable)
# print(type('a'))
# print(type(type('a')))
# myList = []
# if type(myList) == list:
# 	print('type function output matches type name (as keyword)')
# if isinstance(myList, list):
# 	print('isInstance working')
#
#
# class Lovers:
# 	def __init__(self, name, salary):
# 		self.name = name
# 		self.salary = salary
# 	def giveHike(self, percent):
# 		self.salary += self.salary * percent / 100
# 	def getLastName(self):
# 		return self.name.split()[-1]
#
# pallaviArya = Lovers('Pallavi Arya', 1000)
# punitArya = Lovers('Punit Kumar Arya', 1000)
# print(punitArya.getLastName())
# print(pallaviArya.giveHike(20))
# print(pallaviArya.salary)
#
#
# print(hex(15))
# print(bin(15))
# print(int('0b1111', 2))
# myComplex = complex(2, 3)
# print(myComplex)
# myFloat = 25.
# print(myFloat.as_integer_ratio())
# if myFloat.is_integer():
# 	print('yes integer')
# myInteger = 5
# print(myInteger.bit_length())
# print('OK' if False else True)
# print('OK' if False else 'NOK')
# print('not in' if 's' not in 'spam' else 'in')
# myList2 = myList = [1]
# print('yes' if myList is not myList2 else 'not')
# print('abcdefghi'[1:-1:2])
# myString = 'abcdefghi'
# myString2 = myString[slice(1, 2, -1)]
# print(myString2)
# myDictionary = {'key3': 'value1', 'key2': 'value2', 'key1': 'value3'}
# print(sorted(myDictionary.items()))
# print(int(3.14), int(3.54), int(3.84))
# print(float(3))
#
#
# import platform
#
# print(platform.version(), platform.release(), platform.python_version())
#
#
# print('%e' % 31415.926)
#
#
# print(repr('spam'))
# print(str('spam'))
# print(str(b'xy', 'utf8'))
#


# print('Yes' if 1.1 + 2.3 == 3.3 else 'No')
# print((99999999999999999999999).bit_length() + 1)
# print(complex(2 + -3j) * 3)
# print(2 + -3j * 3)
#
# import cmath
# print(cmath.cos(complex(2, -3)))
#

# myCode = 'print(oct(8))'
# eval(myCode)
#
#
# print('{0:o}, {1:x}, {2:b}'.format(16, 16, 16))
# print('%o, %x, %X' % (15, 15, 15))

#
# import math
#
# print(1 / math.e)
# print(math.sqrt(math.sin(math.pi / 2)))
# print(pow(2, 4))
# print(abs(-2))
# print(max(1, 2, 3, 4), min(1, 2, 3, 4))
# print(math.floor(-2.1))
# print(math.trunc(-2.1))
# print(round(-2.1111, 2))

# import random
#
# print(random.randint(2, 4))
# myList = list(range(10))
# random.shuffle(myList)
# print(myList)


# import decimal
#
# print('Decimal is fixed-precision unlike floating-points' if decimal.Decimal('1.11') + decimal.Decimal('2.22') == decimal.Decimal('3.33') else 'it\'s not')
# print(decimal.Decimal.from_float(1.11))
#
# with decimal.localcontext() as myContext:
# 	myContext.prec = 2
# 	print(decimal.Decimal('0.10') / decimal.Decimal('0.30'))
#
#
# import fractions
#
# print(fractions.Fraction('0.25'))
# myDecimal = 0.25
# print(fractions.Fraction(*myDecimal.as_integer_ratio()))
# print(fractions.Fraction(*(0.25).as_integer_ratio()))
# myFraction = fractions.Fraction(4 / 3)
# print(myFraction.limit_denominator(3))


# mySet1 = set('mySet1')
# mySet2 = set('mySet2')
# mySet1 = mySet1.intersection(mySet2)
# print(mySet1)
# mySet1.add('sets')
# print(mySet1)
# mySet2.update(['m', 'y', 'S', 'e', 't', '3'])
# print(mySet2)
# mySet2.update('mySet4')
# print(mySet2)
# mySet2 = mySet2.union('mySet1')
# print(mySet2)
# print('yes subset' if {1, 2, 3, 9}.issubset(range(10)) else 'not a subset')
# print(dir(mySet2))
# myList = [1, 2, 3, 4, 5, 4, 3, 2]
# myList = list(set(myList))
# print(myList)
# print(set([1, 3, 5]) - set([1, 2, 3, 4, 5]))
# print(set(dir(str)) - set(dir(bytes)))


# print(True + 4)


# list1 = [1, 2, 3]
# list2 = list1
# list2[2] = 4
# print(list1)
# list2 = list1[:]
# list2[2] = 5
# print(list1, list2)


# mySet = {1, 2, 3, 3}
# print(mySet)
# copyOfMySet = mySet.copy()
# print(copyOfMySet)
# copyOfCopyOfMySet = set(copyOfMySet)
# print(copyOfCopyOfMySet)


# import copy
#
# mySet = [1, 2, (1, 2, [1, 2, (1, 2, [1, 2])])]
# print(mySet)
# copyOfMySet = copy.copy(mySet)
# print(copyOfMySet)
# copyOfCopyOfMySet = copy.deepcopy(mySet)
# print(copyOfCopyOfMySet)
# copyOfcopyOfCopyOfMySet = mySet.copy()
# print(copyOfcopyOfCopyOfMySet)
# print(len(mySet))
# copyOfMySet = copy.copy(mySet)
# print(len(copyOfMySet))
# copyOfCopyOfMySet = copy.deepcopy(mySet)
# print(len(copyOfCopyOfMySet))
# copyOfcopyOfCopyOfMySet = mySet.copy()
# print(len(copyOfcopyOfCopyOfMySet))
# print(type(mySet[2]))
# print(type(mySet[2][2]))


# import sys

# print(sys.argv[0], len(sys.argv[0]))
